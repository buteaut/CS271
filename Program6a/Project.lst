Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/16/17 21:20:48
Macro Array     (Program6a.asm				     Page 1 - 1


				TITLE Macro Array     (Program6a.asm)

				; Author: Thomas Buteau
				; CS271-400 / Project 6a                Date: 3-19-17
				; Description: This program utilizes macros and procedures to collect an array of 
				;		10 unsigned 32bit numbers from the user then display them as well as 
				;		their sum and average.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 0000000A			ARR_MAX	=	10	;maximum amount of numbers in the array
 = 00000001			USER_MIN	=	1	;minimum number accepted from user
 = 19999999			USER_MAX	=	429496729	;max number accepted from user
				;displayString macro taken from lecture 26 video mWriteStr macro
				displayString	MACRO	buffer
					push	EDX
					mov	EDX, [buffer]
					call	WriteString
					pop	EDX
				ENDM

				;getString macro taken from lecture 26 video mReadStr macro with small alterations
				getString	MACRO	buffer, prompt
					push	ECX
					push	EDX
					mov	EDX, [prompt]
					call	WriteString
					mov	EDX, [buffer]
					mov	ECX, 11 ;hardcoded to continue testing, fix before deadline
					call	ReadString
					pop	EDX
					pop	ECX
				ENDM

 00000000			.data
 00000000 4D 61 63 72 6F	intro1	byte		"Macro Array",0
	   20 41 72 72 61
	   79 00
 0000000C 42 79 20 54 68	intro2	byte		"By Thomas Buteau",0
	   6F 6D 61 73 20
	   42 75 74 65 61
	   75 00
 0000001D 45 6E 74 65 72	intro3	byte		"Enter 10 positive integers and I'll display them as well as their sum and average.",0
	   20 31 30 20 70
	   6F 73 69 74 69
	   76 65 20 69 6E
	   74 65 67 65 72
	   73 20 61 6E 64
	   20 49 27 6C 6C
	   20 64 69 73 70
	   6C 61 79 20 74
	   68 65 6D 20 61
	   73 20 77 65 6C
	   6C 20 61 73 20
	   74 68 65 69 72
	   20 73 75 6D 20
	   61 6E 64 20 61
	   76 65 72 61 67
	   65 2E 00
 00000070 55 73 65 72 20	intro4	byte		"User value: ",0
	   76 61 6C 75 65
	   3A 20 00

 0000007D  0000000B [		read1	byte		11	DUP(0) ;user input string to convert to number
	    00
	   ]
 00000088 00000000		covnum	dword	?	;converted number from user input string
 0000008C 0000000A		arrSize	dword	ARR_MAX
 00000090  0000000A [		intArr	dword	ARR_MAX	DUP(?)
	    00000000
	   ]
 000000B8 54 68 65 20 61	result1	byte		"The array of integers is as follows:",0
	   72 72 61 79 20
	   6F 66 20 69 6E
	   74 65 67 65 72
	   73 20 69 73 20
	   61 73 20 66 6F
	   6C 6C 6F 77 73
	   3A 00
 000000DD 09 00			tab1		byte		"	",0
 000000DF 54 68 65 20 73	result2	byte		"The sum of the integers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 20 69
	   73 3A 20 00
 000000FC 54 68 65 20 61	result3	byte		"The average of the integers is: ",0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 20 69 73
	   3A 20 00
 0000011D			sum		qword	0
	   0000000000000000
 00000125 00000000		mean		dword	0

 00000129 54 68 65 20 75	error1	byte		"The user entry is not a valid positive integer, please try again.",0
	   73 65 72 20 65
	   6E 74 72 79 20
	   69 73 20 6E 6F
	   74 20 61 20 76
	   61 6C 69 64 20
	   70 6F 73 69 74
	   69 76 65 20 69
	   6E 74 65 67 65
	   72 2C 20 70 6C
	   65 61 73 65 20
	   74 72 79 20 61
	   67 61 69 6E 2E
	   00

				; (insert variable definitions here)

 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)
 00000000  68 00000000 R		push	OFFSET	intro1
 00000005  68 0000000C R		push	OFFSET	intro2
 0000000A  68 0000001D R		push	OFFSET	intro3

 0000000F  E8 00000088			call	intro

 00000014  68 00000088 R		push	OFFSET	covnum
 00000019  68 00000090 R		push	OFFSET	intArr
 0000001E  FF 35 0000008C R		push			arrSize
 00000024  68 00000129 R		push	OFFSET	error1
 00000029  68 00000070 R		push	OFFSET	intro4
 0000002E  68 0000007D R		push	OFFSET	read1

 00000033  E8 0000009D			call readVal

 00000038  68 00000090 R		push OFFSET	intArr
 0000003D  FF 35 0000008C R		push			arrSize
 00000043  68 0000011D R		push	OFFSET	sum

 00000048  E8 00000116			call sumArr

 0000004D  68 0000011D R		push	OFFSET	sum
 00000052  FF 35 0000008C R		push			arrSize
 00000058  68 00000125 R		push	OFFSET	mean

 0000005D  E8 00000126			call	aveArr

					;push	OFFSET	sum

					;call	writeVal
 00000062  68 00000125 R		push	OFFSET	mean
 00000067  68 000000FC R		push	OFFSET	result3
 0000006C  68 0000011D R		push	OFFSET	sum
 00000071  68 000000DF R		push	OFFSET	result2
 00000076  68 000000DD R		push	OFFSET	tab1
 0000007B  68 00000090 R		push	OFFSET	intArr
 00000080  FF 35 0000008C R		push			arrSize
 00000086  68 000000B8 R		push	OFFSET	result1
 0000008B  E8 0000018C			call	results
					
					;call	WriteDec ;testing purposes
 00000090  E8 00000000 E		call	Crlf
					exit	; exit to operating system
 00000095  6A 00	   *	    push   +000000000h
 00000097  E8 00000000 E   *	    call   ExitProcess
 0000009C			main ENDP



				;	introduction procedure
				;	Inputs: none
				;	Outputs: none
				;	Description: Prints out greeting statements.
 0000009C			intro PROC
					;starting message
 0000009C  55				push		EBP
 0000009D  8B EC			mov		EBP, ESP
					displayString	EBP+16 ;Title
 0000009F  52		     1		push	EDX
 000000A0  8B 55 10	     1		mov	EDX, [EBP+16]
 000000A3  E8 00000000 E     1		call	WriteString
 000000A8  5A		     1		pop	EDX
 000000A9  E8 00000000 E		call		Crlf
					displayString	EBP+12 ;Author
 000000AE  52		     1		push	EDX
 000000AF  8B 55 0C	     1		mov	EDX, [EBP+12]
 000000B2  E8 00000000 E     1		call	WriteString
 000000B7  5A		     1		pop	EDX
 000000B8  E8 00000000 E		call		Crlf
					displayString	EBP+8 ;Description
 000000BD  52		     1		push	EDX
 000000BE  8B 55 08	     1		mov	EDX, [EBP+8]
 000000C1  E8 00000000 E     1		call	WriteString
 000000C6  5A		     1		pop	EDX
 000000C7  E8 00000000 E		call		Crlf
 000000CC  E8 00000000 E		call		Crlf
					
 000000D1  5D				pop		EBP
 000000D2  C2 000C			ret	12

 000000D5			intro ENDP

				;	getUserData procedure
				;	Inputs: read1, intro4, error1, arrSize, intArr, covnum (all from system stack)
				;	Outputs: intArr
				;	Description: runs loop that gets user data, calls validate, then adds 
				;			user data to array.
 000000D5			readVal PROC
					;user instructions
 000000D5  55				push		EBP
 000000D6  8B EC			mov		EBP, ESP
 000000D8  8B 4D 14			mov		ECX, [EBP+20] ;arrSize
 000000DB  8B 7D 18			mov		EDI, [EBP+24] ;intArr
 000000DE			ArrLoop1: ;loops getting input from user and putting it in the array
					getString	EBP+8, EBP+12
 000000DE  51		     1		push	ECX
 000000DF  52		     1		push	EDX
 000000E0  8B 55 0C	     1		mov	EDX, [EBP+12]
 000000E3  E8 00000000 E     1		call	WriteString
 000000E8  8B 55 08	     1		mov	EDX, [EBP+8]
 000000EB  B9 0000000B	     1		mov	ECX, 11 ;hardcoded to continue testing, fix before deadline
 000000F0  E8 00000000 E     1		call	ReadString
 000000F5  5A		     1		pop	EDX
 000000F6  59		     1		pop	ECX
 000000F7  E8 00000000 E		call		Crlf
 000000FC  E8 0000000D			call	validate
 00000101  8B 75 1C			mov		ESI, [EBP+28] ;covnum
 00000104  8B 06			mov		EAX,[ESI]
 00000106  FC				cld
 00000107  AB				stosd ;adds EAX value to location stored in EDI
 00000108  E2 D4			loop arrLoop1
 0000010A  5D				pop		EBP
 0000010B  C2 0018			ret	24
 0000010E			readVal ENDP

				;	validate procedure
				;	Inputs: read1, intro4, error1, covnum (all from system stack)
				;	Outputs: covnum (on system stack)
				;	Description: Converts user string into integer then checks if integer is
				;			in acceptable range. If not gets new string from user and repeats.
 0000010E			validate PROC
 0000010E  50				push		EAX
 0000010F  51				push		ECX
 00000110  52				push		EDX
 00000111  56				push		ESI
 00000112  55				push		EBP
 00000113  8B EC			mov		EBP, ESP
 00000115  8B 75 34			mov		ESI, [EBP+52]
 00000118  EB 2D			jmp		convert 

 0000011A			inval:	
					displayString	EBP+40 ;error message
 0000011A  52		     1		push	EDX
 0000011B  8B 55 28	     1		mov	EDX, [EBP+40]
 0000011E  E8 00000000 E     1		call	WriteString
 00000123  5A		     1		pop	EDX
 00000124  E8 00000000 E		call		Crlf
					getString	EBP+32, EBP+36 ;ask user for input
 00000129  51		     1		push	ECX
 0000012A  52		     1		push	EDX
 0000012B  8B 55 24	     1		mov	EDX, [EBP+36]
 0000012E  E8 00000000 E     1		call	WriteString
 00000133  8B 55 20	     1		mov	EDX, [EBP+32]
 00000136  B9 0000000B	     1		mov	ECX, 11 ;hardcoded to continue testing, fix before deadline
 0000013B  E8 00000000 E     1		call	ReadString
 00000140  5A		     1		pop	EDX
 00000141  59		     1		pop	ECX
 00000142  E8 00000000 E		call		Crlf

 00000147			convert:
 00000147  8B 55 20			mov		EDX,	[EBP+32]
 0000014A  E8 00000000 E		call		ParseDecimal32 ;converts string in EDX to number in EAX
								
 0000014F			check:	;checks EAX against upper and lower limits
 0000014F  3D 19999999			cmp		EAX, USER_MAX
 00000154  7F C4			jnle		inval ;goes to end if greater than 200
 00000156  83 F8 01			cmp		EAX, USER_MIN
 00000159  7C BF			jnge		inval ;goes to end if less than 10

 0000015B  89 06			mov		[ESI],EAX

 0000015D  5D				pop		EBP
 0000015E  5E				pop		ESI
 0000015F  5A				pop		EDX
 00000160  59				pop		ECX
 00000161  58				pop		EAX
 00000162  C3				ret 
 00000163			validate ENDP

				;	sumArr procedure
				;	Inputs: intArr, arrSize, sum (all from system stack)
				;	Outputs: sum (on system stack)
				;	Description: Adds all the values in intArr and pushes the result to sum.
 00000163			sumArr PROC
 00000163  56				push		ESI
 00000164  53				push		EBX
 00000165  50				push		EAX
 00000166  51				push		ECX
 00000167  55				push		EBP
 00000168  8B EC			mov		EBP, ESP
 0000016A  8B 4D 1C			mov		ECX, [EBP+28] ;intArr
 0000016D  8B 75 18			mov		ESI, [EBP+24] ;arrSize
 00000170  8B 1E			mov		EBX, [ESI] ;sum variable
 00000172  8B 75 20			mov		ESI, [EBP+32]

 00000175			sumL1:
 00000175  FC				cld
 00000176  AD				lodsd	;loads next number from intArr into EAX
 00000177  03 D8			add		EBX, EAX
 00000179  E2 FA			loop		sumL1
 0000017B  8B 45 18			mov		EAX, [EBP+24]
 0000017E  89 18			mov		[EAX], EBX ;moves sum to sum variable

 00000180  5D				pop		EBP
 00000181  59				pop		ECX
 00000182  58				pop		EAX
 00000183  5B				pop		EBX
 00000184  5E				pop		ESI
 00000185  C2 000C			ret	12
 00000188			sumArr ENDP

				;	aveArr procedure
				;	Inputs: sum, arrSize mean (all from system stack)
				;	Outputs: mean (on system stack)
				;	Description: Divides sum by arrSize and pushed the result to mean.
 00000188			aveArr PROC
 00000188  50				push		EAX
 00000189  53				push		EBX
 0000018A  52				push		EDX
 0000018B  56				push		ESI
 0000018C  55				push		EBP
 0000018D  8B EC			mov		EBP, ESP
 0000018F  8B 75 20			mov		ESI, [EBP+32]
 00000192  8B 06			mov		EAX, [ESI] ;sum
 00000194  8B 5D 1C			mov		EBX, [EBP+28] ;arrSize
 00000197  8B 75 18			mov		ESI, [EBP+24] ;mean

 0000019A  BA 00000000			mov		EDX, 0
 0000019F  F7 F3			div		EBX
 000001A1  8B D8			mov		EBX, EAX 
 000001A3  89 1E			mov		[ESI], EBX  ;moves average in mean

 000001A5  5D				pop		EBP
 000001A6  5E				pop		ESI
 000001A7  5A				pop		EDX
 000001A8  5B				pop		EBX
 000001A9  58				pop		EAX
 000001AA  C2 000C			ret	12

 000001AD			aveArr ENDP

				;	writeVal procedure
				;	Inputs: number from system stack
				;	Outputs: None
				;	Description: Takes the number on the top of the stack, converts it
				;			to a string and prints it.
 000001AD			writeVal PROC
 0000016B			.data	
 0000016B  0000000B [			intStr	byte	11	DUP(0) ;local string for printing integers
	    00
	   ]
 000001AD			.code
 000001AD  50				push		EAX
 000001AE  53				push		EBX
 000001AF  51				push		ECX
 000001B0  52				push		EDX
 000001B1  57				push		EDI
 000001B2  56				push		ESI
 000001B3  55				push		EBP
 000001B4  8B EC			mov		EBP, ESP

 000001B6  BA 00000000			mov		EDX, 0
 000001BB  8B 45 20			mov		EAX, [EBP+32] ;number to convert to string
 000001BE  BB 0000000A			mov		EBX, 10 ;to ensure each digit is recorded
 000001C3  B9 00000000			mov		ECX, 0 ;count of digits pushed to stack
 000001C8  BF 0000016B R		mov		EDI, OFFSET intStr

 000001CD  83 F8 0A			cmp		EAX, 10
 000001D0  7D 07			jge		strLoop ;jumps to loop if number is 2 or more digits long
 000001D2  83 C0 30			add		EAX, 48 ;convert to ASCII character
 000001D5  50				push		EAX
 000001D6  41				inc		ECX
 000001D7  EB 16			jmp		wrtLoop

 000001D9			strLoop:
 000001D9  BA 00000000			mov		EDX, 0
 000001DE  F7 F3			div		EBX
 000001E0  83 C2 30			add		EDX, 48 ;convert to ASCII character
 000001E3  52				push		EDX
 000001E4  41				inc		ECX
 000001E5  83 F8 0A			cmp		EAX, 10
 000001E8  7D EF			jge		strLoop ;if remainder exists loop

 000001EA  83 C0 30			add		EAX, 48 ;convert to ASCII character
 000001ED  50				push		EAX
 000001EE  41				inc		ECX

 000001EF			wrtLoop:	;writes digits in stack to intStr
 000001EF  FC				cld
 000001F0  58				pop		EAX
 000001F1  AA				stosb	
 000001F2  E2 FB			loop		wrtLoop

					displayString	OFFSET intStr
 000001F4  52		     1		push	EDX
 000001F5  BA 0000016B R     1		mov	EDX, [OFFSET intStr]
 000001FA  E8 00000000 E     1		call	WriteString
 000001FF  5A		     1		pop	EDX

 00000200  BF 0000016B R		mov		EDI, OFFSET intStr
 00000205  B9 0000000B			mov		ECX,	SIZEOF intStr
 0000020A  B8 00000000			mov		EAX, 0
 0000020F  FC				cld
 00000210  F3/ AB			rep		stosd ;clears the string for the next iteration
					
 00000212  5D				pop		EBP
 00000213  5E				pop		ESI
 00000214  5F				pop		EDI
 00000215  5A				pop		EDX
 00000216  59				pop		ECX
 00000217  5B				pop		EBX
 00000218  58				pop		EAX
 00000219  C2 0004			ret	4
 0000021C			writeVal ENDP

				;	results procedure
				;	Inputs: result1, arrSize, intArr, tab1, result2, sum, result3, mean (from system stack)
				;	Outputs: None
				;	Description: Prints out the array, sum, and average.
 0000021C			results PROC
 0000021C  50				push		EAX
 0000021D  51				push		ECX
 0000021E  52				push		EDX
 0000021F  56				push		ESI
 00000220  55				push		EBP
 00000221  8B EC			mov		EBP, ESP

					displayString	EBP+24 ;result1
 00000223  52		     1		push	EDX
 00000224  8B 55 18	     1		mov	EDX, [EBP+24]
 00000227  E8 00000000 E     1		call	WriteString
 0000022C  5A		     1		pop	EDX
 0000022D  E8 00000000 E		call		Crlf

 00000232  8B 4D 1C			mov		ECX, [EBP+28] ;arrSize
 00000235  8B 75 20			mov		ESI, [EBP+32] ;intArr 
 00000238  FC				cld

 00000239			ArrayL1:
 00000239  AD				lodsd
 0000023A  50				push		EAX
 0000023B  E8 FFFFFF6D			call		writeVal
					displayString	EBP+36 ;tab
 00000240  52		     1		push	EDX
 00000241  8B 55 24	     1		mov	EDX, [EBP+36]
 00000244  E8 00000000 E     1		call	WriteString
 00000249  5A		     1		pop	EDX
 0000024A  E2 ED			loop		ArrayL1
 0000024C  E8 00000000 E		call		Crlf

					displayString	EBP+40 ;result2
 00000251  52		     1		push	EDX
 00000252  8B 55 28	     1		mov	EDX, [EBP+40]
 00000255  E8 00000000 E     1		call	WriteString
 0000025A  5A		     1		pop	EDX
 0000025B  E8 00000000 E		call		Crlf

 00000260  8B 75 2C			mov		ESI, [EBP+44] ;sum
 00000263  8B 06			mov		EAX, [ESI]
 00000265  50				push		EAX
 00000266  E8 FFFFFF42			call		writeVal
 0000026B  E8 00000000 E		call		Crlf

					displayString	EBP+48 ;result3
 00000270  52		     1		push	EDX
 00000271  8B 55 30	     1		mov	EDX, [EBP+48]
 00000274  E8 00000000 E     1		call	WriteString
 00000279  5A		     1		pop	EDX
 0000027A  E8 00000000 E		call		Crlf

 0000027F  8B 75 34			mov		ESI, [EBP+52] ;mean
 00000282  8B 06			mov		EAX, [ESI]
 00000284  50				push		EAX
 00000285  E8 FFFFFF23			call		writeVal
 0000028A  E8 00000000 E		call		Crlf

 0000028F  5D				pop		EBP
 00000290  5E				pop		ESI
 00000291  5A				pop		EDX
 00000292  59				pop		ECX
 00000293  58				pop		EAX

 00000294  C2 0020			ret 32
 00000297			results ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/16/17 21:20:48
Macro Array     (Program6a.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000176 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000297 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
aveArr . . . . . . . . . . . . .	P Near	 00000188 _TEXT	Length= 00000025 Public STDCALL
intro  . . . . . . . . . . . . .	P Near	 0000009C _TEXT	Length= 00000039 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009C Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000D5 _TEXT	Length= 00000039 Public STDCALL
  ArrLoop1 . . . . . . . . . . .	L Near	 000000DE _TEXT	
results  . . . . . . . . . . . .	P Near	 0000021C _TEXT	Length= 0000007B Public STDCALL
  ArrayL1  . . . . . . . . . . .	L Near	 00000239 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sumArr . . . . . . . . . . . . .	P Near	 00000163 _TEXT	Length= 00000025 Public STDCALL
  sumL1  . . . . . . . . . . . .	L Near	 00000175 _TEXT	
validate . . . . . . . . . . . .	P Near	 0000010E _TEXT	Length= 00000055 Public STDCALL
  inval  . . . . . . . . . . . .	L Near	 0000011A _TEXT	
  convert  . . . . . . . . . . .	L Near	 00000147 _TEXT	
  check  . . . . . . . . . . . .	L Near	 0000014F _TEXT	
writeVal . . . . . . . . . . . .	P Near	 000001AD _TEXT	Length= 0000006F Public STDCALL
  strLoop  . . . . . . . . . . .	L Near	 000001D9 _TEXT	
  wrtLoop  . . . . . . . . . . .	L Near	 000001EF _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARR_MAX  . . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_MAX . . . . . . . . . . . .	Number	 19999999h   
USER_MIN . . . . . . . . . . . .	Number	 00000001h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrSize  . . . . . . . . . . . .	DWord	 0000008C _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
covnum . . . . . . . . . . . . .	DWord	 00000088 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error1 . . . . . . . . . . . . .	Byte	 00000129 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArr . . . . . . . . . . . . .	DWord	 00000090 _DATA	
intStr . . . . . . . . . . . . .	Byte	 0000016B _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000000C _DATA	
intro3 . . . . . . . . . . . . .	Byte	 0000001D _DATA	
intro4 . . . . . . . . . . . . .	Byte	 00000070 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mean . . . . . . . . . . . . . .	DWord	 00000125 _DATA	
read1  . . . . . . . . . . . . .	Byte	 0000007D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
result1  . . . . . . . . . . . .	Byte	 000000B8 _DATA	
result2  . . . . . . . . . . . .	Byte	 000000DF _DATA	
result3  . . . . . . . . . . . .	Byte	 000000FC _DATA	
sum  . . . . . . . . . . . . . .	QWord	 0000011D _DATA	
tab1 . . . . . . . . . . . . . .	Byte	 000000DD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
